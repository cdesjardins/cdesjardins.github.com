<!--#include file="menu.html"-->
    <td width=500>

  <table border="0">
    <tr><td><b><center>Tekelec RTOS work</center></b></td></tr>
    <tr><td>
       <b>Overview:</b><p>
       At Tekelec I have had the chance to become very involved in the 
       development of low-level software for the following platforms:
       <ul>
       <li>VxWorks Kernel, and BSP development
       <li>Proprietary OSs running on Arm based 
       IXP1250, IXP2350, 
       and <a href="http://www.cirrus.com/en/products/pro/detail/P131.html">EP9312</a> processors.
       <li>Proprietary OSs running on many different x86 processors
     </ul>
    <p>
    <a href="images/e5.jpg" border=0><img alt="Screenshot 1" src="images/e5-small.jpg" align="left" hspace="10" vspace="10"></a>
    All of the above platforms ran on multi-processor distributed memory blades, which were part
    of a larger distributed real time message passing system that implemented the Tekelec SS7 Eagle 
    and related products (SCCP, GTT, LNP, etc...).

    </td></tr>
    <tr><td>
       <br>
       <b>My VxWorks software development efforts at Tekelec included: </b>
       <ul>
       <li>In system device programming (FPGA, CPLD, and Firmware hub)
       <li>ISR handlers for Thermal conditions, battery voltages, clocks, and other Tekelec specific events
       <li>SMBus interface routines
       <li>CPU Thermal monitor and management <a href="patentapp.pdf">(patent pending)</a>
       <li>Application download
       <li>Failsafe file system on top of dosFs
       <li>Error handler/reporting application
       <li>Custom NMI handler
       <li>Boot loader
       </ul>
	   <p>
       On all of the above projects (except the last two) I was the lead or sole engineer.
       Because I played such a large role in the development of OS level code, I was the primary contact
       for the hardware team during board bring up when software assistance was needed.<p>

       <b>The Arm code I got to work on includes the following:</b>
       <ul>
       <li>CPU Interface code for <a href="http://www.broadcom.com/products/BCM5632">Broadcom 5630</a> switch
       <li>Application download
       <li>Flash programming
       <li>LED Controller
       <li>Many other Tekelec specific modules
       </ul>
       <p>
       I was the sole engineer responsible for the <a href="http://www.broadcom.com/products/BCM5632">Broadcom 5630</a> "light management interface", this was a major
       software development effort and a considerable management risk because this was the first
       time Tekelec had ever used a Broadcom switch in any product. However this project became 
       widely heralded because it went so smoothly, and the code has proven to be quite stable.<p>
 
       <p>
	   <b>Next generation development efforts:</b>
	   <p>
	   I also took a lead role in the design and development of the next generation of tekelec products which
	   will be based on a dual core Intel platform. Because VxWorks does not fully support SMP we decided to 
	   come up with our own VxWorks based multiprocessor solution. To do this we compile two VxWorks kernels
	   and run one kernel on each core with a home grown shared memory inter-processor communication subsystem.
	   My responsibilities in this effort included:
	   <ul>
	   <li>Initial board bring up
	   <li>Software architecture
	   <li>Designed and developed shared memory communication subsystem
	   <li>Designed and developed generic interrupt driven (IPI) inter-processor message passing mechanism
       <li>File I/O device driver which allowes both cores to share the same flash file system
	   </ul>
       <p>
	   <b>Test application:</b>
	   <p>
	   Another development effort that I got to lead was a system test tool for the Tekelec signal transfer point (STP)
       which enables Tekelc personnel to stress the backbone of the STP in a controlled fashion. The STP is basically 
	   a large distributed multiprocessor blade system, where each blade in the STP has two processors. One processor
	   is used for communication with other cards in the system, the second processor is used to run the application 
	   designed for that blade. One STP may contain blades with processors from the 286 all the way up to the latest
	   high speed Xeon and/or IXP processors. With this recent influx of powerful processors it has become very important
	   to verify that the communication backbone is capable of supporting the full gamut of Tekelec blades. Prior to my
	   start at Tekelec there was no way of thoroughly testing the communication backbone so I decided to take the initiative
	   to create such a test application. 
	   <p>
       The test appication consists of the following components:
	   <ul>
	   <li>UDP socket based server which runs on both Linux and VxWorks
	   <li>C++ dynamic link library (dll) which provides the Windows client side socket API
	   <li>MFC GUI application which links with the dll and enables users to preform directed tests
	   <li>Command line application which also links with the dll and enables users to write automated test cases with a simple single pass scripting language
       </ul>
       This test tool was recently released for internal Tekelec useage, and is scheduled to ship to customer sites around Q3 2007.
	   <a href="images/pktgen.jpg" border=0><img alt="Screenshot 1" src="images/pktgen-small.jpg" align="left" hspace="10" vspace="10"></a>
	   

    </td></tr>
  </table>
</center>
</body>
</html>
